To create a Certificate Signing Request (CSR) in Kubernetes, follow these steps:

Generate a Private Key: First, generate a private key. You can do this using OpenSSL or other tools. Here's an example using OpenSSL:

openssl genrsa -out <private_key_file>.key 2048
Replace <private_key_file> with the name of your private key file.

Create a CSR: With the private key generated, create a CSR. This will include information about the entity requesting the certificate (such as organization, common name, etc.). You can create a CSR using OpenSSL:

openssl req -new -key <private_key_file>.key -out <csr_file>.csr
Follow the prompts to enter the information requested, such as country, state, organization, common name, etc. The common name should typically be the domain name of the service or entity for which you're requesting the certificate.

Save the CSR: Save the CSR file (<csr_file>.csr) generated in the previous step.
Create a Kubernetes CSR Object: You can now create a Kubernetes CSR object using the kubectl create command or by applying a YAML manifest.

cat <csr-name>.csr | base64 -w 0

Here's an example YAML manifest for a Kubernetes CSR object:

apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: <csr_name>
spec:
  request: <base64_encoded_csr>
  signerName: kubernetes.io/kube-apiserver-client
  usages:
  - client auth or server auth
  - digital signature
  - key encipherment
  groups:
  - system authenticated 

2nd example:
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: example-csr
spec:
  request: <base64_encoded_csr_content>
  signerName: kubernetes.io/kube-apiserver-client
  usages:
    - digital signature
    - key encipherment
    - client auth

3rd Example:
---
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: akshay
spec:
  groups:
  - system:authenticated
  request: <Paste the base64 encoded value of the CSR file>
  signerName: kubernetes.io/kube-apiserver-client
  usages:
  - client auth

Replace <csr_name> with a name for your CSR and <base64_encoded_csr> with the base64-encoded content of your CSR file (<csr_file>.csr).

Submit the CSR: Apply the YAML manifest using kubectl apply -f <manifest_file>.yaml or create the CSR directly using kubectl create -f <manifest_file>.yaml.

kubectl apply -f csr.yaml
Approve the CSR: After creating the CSR object, it needs to be approved by an administrator. You can list pending CSRs using:

kubectl get csr
Then approve the CSR using:

kubectl certificate approve <csr_name>
Once approved, the signed certificate will be available in the Kubernetes cluster.

Retrieve the Signed Certificate: After approval, you can retrieve the signed certificate using:

kubectl get csr <csr_name> -o jsonpath='{.status.certificate}' | base64 --decode > <signed_cert_file>.crt
Replace <csr_name> with the name of your CSR and <signed_cert_file> with the name of the file to save the signed certificate to.
